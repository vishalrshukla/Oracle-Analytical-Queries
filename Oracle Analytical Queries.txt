-- KNOW YOUR DATA
select  
    "EMPNO", 
    "ENAME", 
    "JOB", 
    "MGR", 
    "HIREDATE", 
    "SAL", 
    "COMM", 
    "DEPTNO" 
from SCOTT."EMP" 
order by DEPTNO ASC, SAL desc;

/* FINS THE 2ND LOWEST SALARY PER DEPARMENT*/

--2ND LOWEST MIN FUCTION
SELECT DEPTNO, MIN(SAL) AS salary 
  FROM SCOTT.EMP 
 WHERE SAL < (SELECT MIN(SAL) 
                 FROM SCOTT.EMP) 
GROUP BY DEPTNO ORDER BY DEPTNO;



---2ND LOWEST NTH FUNCTION
SELECT DISTINCT DEPTNO, NTH_VALUE(SAL,2) 
 OVER (PARTITION BY DEPTNO ORDER BY SAL  
       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
       AS "SECOND LOWEST" 
FROM SCOTT.EMP 
ORDER BY DEPTNO;

----CO SCHEMA------
select 
    "ORDER_ID",
    "ORDER_DATETIME",
    ORD."CUSTOMER_ID",CUST.FULL_NAME,
    "ORDER_STATUS",
    "STORE_ID"
from CO."ORDERS" ORD, CO.CUSTOMERS CUST 
WHERE ORD.CUSTOMER_ID=CUST.CUSTOMER_ID
ORDER BY CUSTOMER_ID,  ORDER_DATETIME DESC;

/*FIND THE FIRST AND LAST TRANSACTION OF EACH CUSTOMER*/
select 
    ORD."CUSTOMER_ID",CUST.FULL_NAME,
    MIN("ORDER_DATETIME") FIRST_BUY,MAX("ORDER_DATETIME") LAST_BUY
from CO."ORDERS" ORD, CO.CUSTOMERS CUST 
WHERE ORD.CUSTOMER_ID=CUST.CUSTOMER_ID
GROUP BY ORD."CUSTOMER_ID",CUST.FULL_NAME
ORDER BY CUSTOMER_ID;

/*FIND THE FIRST AND LAST TRANSACTION OF EACH CUSTOMER ALONG WITH ALL THE ORDERS*/
select 
    ORD."CUSTOMER_ID",CUST.FULL_NAME,
    "ORDER_ID",
    "ORDER_DATETIME",
    "ORDER_STATUS",
    "STORE_ID",
    FIRST_VALUE("ORDER_DATETIME")
 OVER (PARTITION BY  ORD."CUSTOMER_ID" ORDER BY "ORDER_DATETIME")
       AS "FIRST_BUY",
    LAST_VALUE("ORDER_DATETIME")
 OVER (PARTITION BY  ORD."CUSTOMER_ID" ORDER BY "ORDER_DATETIME")
       AS "LAST_BUY"
from CO."ORDERS" ORD, CO.CUSTOMERS CUST 
WHERE ORD.CUSTOMER_ID=CUST.CUSTOMER_ID
ORDER BY CUSTOMER_ID,  ORDER_DATETIME DESC;

/*
CREATE ORDER - PRIODUCT VALUE 
*/
select 
    ORD."CUSTOMER_ID",CUST.FULL_NAME,
    ORD."ORDER_ID",
    "ORDER_DATETIME",
    "ORDER_STATUS",
    "STORE_ID",
    FIRST_VALUE("ORDER_DATETIME")
 OVER (PARTITION BY  ORD."CUSTOMER_ID" ORDER BY "ORDER_DATETIME")
       AS "FIRST_BUY",
    LAST_VALUE("ORDER_DATETIME")
 OVER (PARTITION BY  ORD."CUSTOMER_ID" ORDER BY "ORDER_DATETIME")
       AS "LAST_BUY",
       PRODUCT_ID,
       UNIT_PRICE,
       QUANTITY,
      (QUANTITY*UNIT_PRICE) AS"PRODUCT VALUE"
from CO."ORDERS" ORD, CO.CUSTOMERS CUST, CO.ORDER_ITEMS ORDITEMS
WHERE ORD.CUSTOMER_ID=CUST.CUSTOMER_ID AND ORD."ORDER_ID"=ORDITEMS."ORDER_ID"
ORDER BY CUSTOMER_ID,  ORDER_DATETIME DESC;

/*
CREATE ORDER VALUE
*/
select 
    ORD."ORDER_ID",
    "ORDER_DATETIME",
    "ORDER_STATUS",
    "STORE_ID",
       PRODUCT_ID,
       UNIT_PRICE,
       QUANTITY,
      (QUANTITY*UNIT_PRICE) AS"PRODUCT VALUE",
      SUM(QUANTITY*UNIT_PRICE)OVER (ORDER BY ORD.ORDER_ID) AS "ORDER VALUE"
from CO."ORDERS" ORD, CO.ORDER_ITEMS ORDITEMS
WHERE ORD."ORDER_ID"=ORDITEMS."ORDER_ID"
ORDER BY  ORDER_ID ;

---
select 
    "PRODUCT_NAME",
    "ORDER_STATUS",
    "TOTAL_SALES",
    "ORDER_COUNT"
from CO."PRODUCT_ORDERS"
ORDER BY 1;

/*
show order counts in Column for each order status
*/


SELECT *  FROM (
select 
    "PRODUCT_NAME",
    "ORDER_STATUS",
    "ORDER_COUNT"
from CO."PRODUCT_ORDERS"
)
PIVOT
(
 SUM("ORDER_COUNT") FOR "ORDER_STATUS" IN ('CANCELLED','REFUNDED','COMPLETE')
)
ORDER BY 1;

